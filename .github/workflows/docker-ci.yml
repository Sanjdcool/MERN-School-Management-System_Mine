# name: Build and Push Docker Images to GHCR

# on:
#   push:
#     branches: [main, master]
#   pull_request:
#     branches: [main, master]

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     env:
#       REGISTRY: ghcr.io
#       IMAGE_BACKEND: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-backend
#       IMAGE_FRONTEND: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-frontend
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to GitHub Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GHCR_PAT }}

#       - name: Build and push backend image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./backend
#           file: ./backend/Dockerfile
#           push: true
#           tags: ${{ env.IMAGE_BACKEND }}:latest

#       - name: Build and push frontend image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./frontend
#           file: ./frontend/Dockerfile
#           push: true
#           tags: ${{ env.IMAGE_FRONTEND }}:latest

#       - name: Run backend tests (if available)
#         run: |
#           cd backend
#           if [ -f package.json ] && npm run | grep -q test; then npm install && npm test; else echo "No backend tests"; fi

#       - name: Run frontend tests (if available)
#         run: |
#           cd frontend
#           if [ -f package.json ] && npm run | grep -q test; then npm install && npm test; else echo "No frontend tests"; fi 

name: Build and Push Docker Images to GHCR

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_BACKEND: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-backend
      IMAGE_FRONTEND: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}  # Using GITHUB_TOKEN instead of GHCR_PAT
          
      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
        
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          
      - name: Run backend tests (if available)
        run: |
          cd backend
          if [ -f package.json ] && npm run | grep -q test; then 
            npm install && npm test
          else 
            echo "No backend tests found"
          fi
          
      - name: Run frontend tests (if available)
        run: |
          cd frontend
          if [ -f package.json ] && npm run | grep -q test; then 
            npm install && npm test
          else 
            echo "No frontend tests found"
          fi